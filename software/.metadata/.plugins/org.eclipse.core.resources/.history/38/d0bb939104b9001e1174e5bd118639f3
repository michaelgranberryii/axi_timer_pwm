#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xtmrctr.h"
#include "xgpio.h"
#include "xparameters.h"
#include "sleep.h"

#define TMR_CTR_0 0
#define GPIO_1 1
#define ONE_mSec (1e9)/1e3 // 1 mSec duty cycle
#define PWM_PER (ONE_mSec*20) // 20 mSec pwm period

XTmrCtr tmr;
XGpio switches;

void tmr_init() {
	int status = XTmrCtr_Initialize(&tmr, XPAR_TIMER0_DEVICE_ID);
	if(status == XST_SUCCESS) {
		xil_printf("TMR INIT SUCCUSSFUL\n\r");
	} else {
		xil_printf("TMR INIT FAILED\n\r");
	}
	 status = XTmrCtr_SelfTest(&tmr, TMR_CTR_0);
	if(status == XST_SUCCESS) {
		xil_printf("TMR SELF TEST SUCCUSSFUL\n\r");
	} else {
		xil_printf("TMR SELF TEST FAILED\n\r");
	}
}

void switches_init() {
	int status = XGpio_Initialize(&switches, XPAR_SWITCH_DEVICE_ID);
	if(status == XST_SUCCESS) {
		xil_printf("SWITCHES INIT SUCCUSSFUL\n\r");
	} else {
		xil_printf("SWITCHES INIT FAILED\n\r");
	}
}

void tmr_setup() {
	XTmrCtr_Stop(&tmr, TMR_CTR_0);
	u32 tmrctr0_option = XTmrCtr_GetOptions(&tmr, TMR_CTR_0);
	tmrctr0_option |= XTC_DOWN_COUNT_OPTION;
	XTmrCtr_SetOptions(&tmr, TMR_CTR_0, tmrctr0_option);
	XTmrCtr_PwmConfigure(&tmr, PWM_PER, ONE_mSec);
	XTmrCtr_PwmEnable(&tmr);
	XTmrCtr_Start(&tmr, TMR_CTR_0);
}

void update_pwm(int duty_cycle) {
	XTmrCtr_PwmDisable(&tmr);
	XTmrCtr_PwmConfigure(&tmr, PWM_PER, duty_cycle);
	XTmrCtr_PwmEnable(&tmr);
}

void switches_setup() {
	XGpio_SetDataDirection(&switches, GPIO_1, 0xF); // GPIO switches -> input
}

void change_pwm(int sw_val, int *dc, int *dc_prev) {
	sw_val = XGpio_DiscreteRead(&switches, 1);
	xil_printf("sw val : %d\n\r", sw_val);
	switch (sw_val) {
		case 0x1:
			*dc = ONE_mSec; // 1 mSec
			break;
		case 0x3:
			*dc = (12e8)/1e3; // 1.2 mSec
			break;
		case 0x7:
			*dc = (13e8)/1e3; // 1.3 mSec
			break;
		case 0xf:
			*dc = (15e8)/1e3; // 1.5 mSec
			break;
	}
	xil_printf("dc val : %d nSec\n\r", (*dc));
	if(*dc_prev != *dc){
		update_pwm(*dc);
	}
	*dc_prev = *dc;
}

int main()
{
    init_platform();
    switches_init();
    switches_setup();
    tmr_init();
    tmr_setup();
    int sw_val = 0;
    int dc = 0;
    int dc_prev = 0;
    while(1) {
    	change_pwm(sw_val, &dc, &dc_prev);
    }
    cleanup_platform();
    return 0;
}
